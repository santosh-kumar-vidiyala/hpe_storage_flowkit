{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HPE Storage Flowkit \u00b6 Workflow\u2011centric Python toolkit for HPE Storage arrays. It layers orchestration and idempotent behaviors over raw REST endpoints, providing high\u2011level workflow classes you can call directly or via the composite AnsibleClient . Key Concepts Concept Description Workflow Classes Domain\u2011specific facades (VolumeWorkflow, SnapshotWorkflow, etc.) mapping method calls to REST endpoints or SSH commands. Idempotence Methods aim to avoid unnecessary changes; existence checks precede destructive operations. Composite Client AnsibleClient aggregates all workflows into a single interface for automation. Quick Start from hpe_storage_flowkit.src.ansible_client import AnsibleClient client = AnsibleClient(api_url=\"https://array.example\", username=\"admin\", password=\"secret\") client.create_volume( name=\"demo-vol\", cpg=\"FC_r5\", size=10, size_unit=\"GiB\", params={\"compression\": True} ) Next Steps Explore a workflow page (e.g., VolumeWorkflow) to see endpoints and parameter tables. Integrate with automation by composing workflows inside your toolchain. Add CI to rebuild this site using mkdocs build on commits. Contributing Pull requests: ensure new methods have updated docs. Automated generation script (future) will live under tools/ . Proposals welcome. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Home"},{"location":"#hpe-storage-flowkit","text":"Workflow\u2011centric Python toolkit for HPE Storage arrays. It layers orchestration and idempotent behaviors over raw REST endpoints, providing high\u2011level workflow classes you can call directly or via the composite AnsibleClient . Key Concepts Concept Description Workflow Classes Domain\u2011specific facades (VolumeWorkflow, SnapshotWorkflow, etc.) mapping method calls to REST endpoints or SSH commands. Idempotence Methods aim to avoid unnecessary changes; existence checks precede destructive operations. Composite Client AnsibleClient aggregates all workflows into a single interface for automation. Quick Start from hpe_storage_flowkit.src.ansible_client import AnsibleClient client = AnsibleClient(api_url=\"https://array.example\", username=\"admin\", password=\"secret\") client.create_volume( name=\"demo-vol\", cpg=\"FC_r5\", size=10, size_unit=\"GiB\", params={\"compression\": True} ) Next Steps Explore a workflow page (e.g., VolumeWorkflow) to see endpoints and parameter tables. Integrate with automation by composing workflows inside your toolchain. Add CI to rebuild this site using mkdocs build on commits. Contributing Pull requests: ensure new methods have updated docs. Automated generation script (future) will live under tools/ . Proposals welcome. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"HPE Storage Flowkit"},{"location":"api_reference/","text":"API Reference \u00b6 This section provides reference documentation for each workflow class in the HPE Storage FlowKit. Workflows encapsulate domain logic, REST/SSH interactions, idempotent checks, and preprocessing helpers that sanitize user inputs before they are sent to the array. Workflow Index Workflow Purpose Link CPG Manage Common Provisioning Groups (create/delete). Open Volume Create, modify, grow, tune, delete volumes. Open Snapshot Snapshot lifecycle: create, promote, delete. Open Clone Physical copy orchestration (online/offline copy). Open VLUN Export/unexport volumes & sets to hosts/host sets. Open Host Host lifecycle & initiator / CHAP management. Open Host Set Group hosts; manage membership. Open Volume Set Group volumes; manage membership & export. Open QoS QoS policy CRUD and listing. Open Remote Copy Group Remote replication groups & volumes control. Open System System level status & metadata retrieval. Open Preprocessing Helpers Overview Many methods call a preprocessing function (e.g. preprocess_create_volume ) before performing the REST/SSH action. Purposes include: Normalizing parameter names and units (e.g. converting size + unit to MiB). Building action payloads (e.g. setting action IDs for grow/tune operations). Validating user input and raising early Python exceptions rather than returning array errors. Idempotence: skipping operations when objects already exist or parameters imply no change. Detailed notes for each method appear on its workflow page under the \"Preprocessing\" subsection. Using Workflows via AnsibleClient from hpe_storage_flowkit.src.ansible_client import AnsibleClient client = AnsibleClient(api_url=\"https://array.example\", username=\"admin\", password=\"secret\") client.create_volume( name=\"demo-vol\", cpg=\"FC_r5\", size=10, size_unit=\"GiB\", params={\"compression\": True} ) The AnsibleClient inherits all workflow methods; each exposes a high-level operation with built-in preprocessing and idempotent checks. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Overview"},{"location":"api_reference/#api-reference","text":"This section provides reference documentation for each workflow class in the HPE Storage FlowKit. Workflows encapsulate domain logic, REST/SSH interactions, idempotent checks, and preprocessing helpers that sanitize user inputs before they are sent to the array. Workflow Index Workflow Purpose Link CPG Manage Common Provisioning Groups (create/delete). Open Volume Create, modify, grow, tune, delete volumes. Open Snapshot Snapshot lifecycle: create, promote, delete. Open Clone Physical copy orchestration (online/offline copy). Open VLUN Export/unexport volumes & sets to hosts/host sets. Open Host Host lifecycle & initiator / CHAP management. Open Host Set Group hosts; manage membership. Open Volume Set Group volumes; manage membership & export. Open QoS QoS policy CRUD and listing. Open Remote Copy Group Remote replication groups & volumes control. Open System System level status & metadata retrieval. Open Preprocessing Helpers Overview Many methods call a preprocessing function (e.g. preprocess_create_volume ) before performing the REST/SSH action. Purposes include: Normalizing parameter names and units (e.g. converting size + unit to MiB). Building action payloads (e.g. setting action IDs for grow/tune operations). Validating user input and raising early Python exceptions rather than returning array errors. Idempotence: skipping operations when objects already exist or parameters imply no change. Detailed notes for each method appear on its workflow page under the \"Preprocessing\" subsection. Using Workflows via AnsibleClient from hpe_storage_flowkit.src.ansible_client import AnsibleClient client = AnsibleClient(api_url=\"https://array.example\", username=\"admin\", password=\"secret\") client.create_volume( name=\"demo-vol\", cpg=\"FC_r5\", size=10, size_unit=\"GiB\", params={\"compression\": True} ) The AnsibleClient inherits all workflow methods; each exposes a high-level operation with built-in preprocessing and idempotent checks. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"API Reference"},{"location":"api_reference/clone/","text":"CloneWorkflow \u00b6 Physical copy (clone) orchestration: create, monitor, stop/resync copies. Methods Overview Method Purpose onlinePhysicalCopyExists() Check online physical copy existence & task state. offlinePhysicalCopyExists() Check offline copy existence. copyVolume() Initiate physical copy. stopOfflinePhysicalCopy() Stop an offline copy task. resyncPhysicalCopy() Resync an existing physical copy pair. copyVolume Signature: copyVolume(src_name, dest_name, dest_cpg, optional=None) Parameter Type Required Description src_name str Yes Source volume. dest_name str Yes Destination (new) volume name. dest_cpg str Yes CPG for destination volume. optional dict No Tuning / priority / snapshot options. Preprocessing: preprocess_copyVolume ensures source exists, destination absent, normalizes optional flags, creates action payload. Returns: dict - Copy task metadata. resyncPhysicalCopy Signature: resyncPhysicalCopy(volume_name) Parameter Type Required Description volume_name str Yes Name of physical copy volume to resync. Preprocessing: Sets action: RESYNC_PHYSICAL_COPY constant; validates pair state. Returns: dict - Resync task response. stopOfflinePhysicalCopy Signature: stopOfflinePhysicalCopy(name) Parameter Type Required Description name str Yes Copy volume name. Preprocessing: Builds payload with action: STOP_PHYSICAL_COPY ; ensures copy in progress. Returns: dict - Stop operation response. Other existence check methods return boolean plus task info (implementation specifics omitted here). \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Clone"},{"location":"api_reference/clone/#cloneworkflow","text":"Physical copy (clone) orchestration: create, monitor, stop/resync copies. Methods Overview Method Purpose onlinePhysicalCopyExists() Check online physical copy existence & task state. offlinePhysicalCopyExists() Check offline copy existence. copyVolume() Initiate physical copy. stopOfflinePhysicalCopy() Stop an offline copy task. resyncPhysicalCopy() Resync an existing physical copy pair. copyVolume Signature: copyVolume(src_name, dest_name, dest_cpg, optional=None) Parameter Type Required Description src_name str Yes Source volume. dest_name str Yes Destination (new) volume name. dest_cpg str Yes CPG for destination volume. optional dict No Tuning / priority / snapshot options. Preprocessing: preprocess_copyVolume ensures source exists, destination absent, normalizes optional flags, creates action payload. Returns: dict - Copy task metadata. resyncPhysicalCopy Signature: resyncPhysicalCopy(volume_name) Parameter Type Required Description volume_name str Yes Name of physical copy volume to resync. Preprocessing: Sets action: RESYNC_PHYSICAL_COPY constant; validates pair state. Returns: dict - Resync task response. stopOfflinePhysicalCopy Signature: stopOfflinePhysicalCopy(name) Parameter Type Required Description name str Yes Copy volume name. Preprocessing: Builds payload with action: STOP_PHYSICAL_COPY ; ensures copy in progress. Returns: dict - Stop operation response. Other existence check methods return boolean plus task info (implementation specifics omitted here). \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"CloneWorkflow"},{"location":"api_reference/cpg/","text":"CPGWorkflow \u00b6 Manage Common Provisioning Groups (CPGs) which define underlying storage pool characteristics. Methods Overview Method Purpose create_cpg() Create a new CPG. delete_cpg() Delete an existing CPG. create_cpg Signature: create_cpg(name, params) Parameter Type Required Description name str Yes CPG name. params dict No Characteristics (e.g. growth increment, RAID type) as supported. Preprocessing: preprocess_create_cpg validates RAID type, growth parameters, filters unsupported keys, ensures non-existence for idempotence. Returns: dict - Created CPG. delete_cpg Signature: delete_cpg(name) Parameter Type Required Description name str Yes CPG name. Preprocessing: preprocess_delete_cpg confirms existence, checks dependent volumes count to avoid deleting in-use pools. Returns: dict | None - Deletion response or None if absent. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"CPG"},{"location":"api_reference/cpg/#cpgworkflow","text":"Manage Common Provisioning Groups (CPGs) which define underlying storage pool characteristics. Methods Overview Method Purpose create_cpg() Create a new CPG. delete_cpg() Delete an existing CPG. create_cpg Signature: create_cpg(name, params) Parameter Type Required Description name str Yes CPG name. params dict No Characteristics (e.g. growth increment, RAID type) as supported. Preprocessing: preprocess_create_cpg validates RAID type, growth parameters, filters unsupported keys, ensures non-existence for idempotence. Returns: dict - Created CPG. delete_cpg Signature: delete_cpg(name) Parameter Type Required Description name str Yes CPG name. Preprocessing: preprocess_delete_cpg confirms existence, checks dependent volumes count to avoid deleting in-use pools. Returns: dict | None - Deletion response or None if absent. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"CPGWorkflow"},{"location":"api_reference/host/","text":"HostWorkflow \u00b6 Manage host objects (initiator identities) and their attributes, CHAP security and path assignments. Methods Overview Method Purpose create_host() Create host. delete_host() Delete host. modify_host() Rename or change persona. add_initiator_chap() Configure initiator CHAP. remove_initiator_chap() Remove initiator CHAP. initiator_chap_exists() Check if initiator CHAP present. add_target_chap() Configure target CHAP. remove_target_chap() Remove target CHAP. queryHost() Query hosts by initiators. add_fc_path_to_host() Add FC paths. remove_fc_path_from_host() Remove FC paths. add_iscsi_path_to_host() Add iSCSI initiators. remove_iscsi_path_from_host() Remove iSCSI initiators. create_host Signature: create_host(name, iscsiNames=None, FCWwns=None, host_domain=None, host_persona=None) Parameter Type Description name str Host name. iscsiNames list[str] iSCSI IQNs to associate. FCWwns list[str] Fibre Channel WWNs. Normalized for formatting. host_domain str Optional domain. host_persona int Persona value (array-specific behavior profile). Preprocessing: Validates formatting of WWNs and IQNs, filters duplicates, ensures host does not exist. Returns: dict - Host resource. Other methods follow similar patterns: existence checks and normalization prior to REST/SSH calls. CHAP operations verify secrets length and hex encoding if requested. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Host"},{"location":"api_reference/host/#hostworkflow","text":"Manage host objects (initiator identities) and their attributes, CHAP security and path assignments. Methods Overview Method Purpose create_host() Create host. delete_host() Delete host. modify_host() Rename or change persona. add_initiator_chap() Configure initiator CHAP. remove_initiator_chap() Remove initiator CHAP. initiator_chap_exists() Check if initiator CHAP present. add_target_chap() Configure target CHAP. remove_target_chap() Remove target CHAP. queryHost() Query hosts by initiators. add_fc_path_to_host() Add FC paths. remove_fc_path_from_host() Remove FC paths. add_iscsi_path_to_host() Add iSCSI initiators. remove_iscsi_path_from_host() Remove iSCSI initiators. create_host Signature: create_host(name, iscsiNames=None, FCWwns=None, host_domain=None, host_persona=None) Parameter Type Description name str Host name. iscsiNames list[str] iSCSI IQNs to associate. FCWwns list[str] Fibre Channel WWNs. Normalized for formatting. host_domain str Optional domain. host_persona int Persona value (array-specific behavior profile). Preprocessing: Validates formatting of WWNs and IQNs, filters duplicates, ensures host does not exist. Returns: dict - Host resource. Other methods follow similar patterns: existence checks and normalization prior to REST/SSH calls. CHAP operations verify secrets length and hex encoding if requested. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"HostWorkflow"},{"location":"api_reference/hostset/","text":"HostSetWorkflow \u00b6 Group hosts for shared exports and policy application. Methods Overview Method Purpose create_hostset() Create host set. delete_hostset() Delete host set. add_hosts_to_hostset() Add hosts. remove_hosts_from_hostset() Remove hosts. get_hostset() Fetch host set details. create_hostset Signature: create_hostset(name, domain=None, setmembers=None) Parameter Type Description name str Host set name. domain str Optional domain grouping. setmembers list[str] Initial host member names. Preprocessing: Validates host existence for each member, filters duplicates, ensures host set not already present. Returns: dict - Host set resource. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Host Set"},{"location":"api_reference/hostset/#hostsetworkflow","text":"Group hosts for shared exports and policy application. Methods Overview Method Purpose create_hostset() Create host set. delete_hostset() Delete host set. add_hosts_to_hostset() Add hosts. remove_hosts_from_hostset() Remove hosts. get_hostset() Fetch host set details. create_hostset Signature: create_hostset(name, domain=None, setmembers=None) Parameter Type Description name str Host set name. domain str Optional domain grouping. setmembers list[str] Initial host member names. Preprocessing: Validates host existence for each member, filters duplicates, ensures host set not already present. Returns: dict - Host set resource. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"HostSetWorkflow"},{"location":"api_reference/qos/","text":"QOSWorkflow \u00b6 Define and manage Quality of Service (QoS) policies restricting I/O (bandwidth, IOPS) on volumes or sets. Methods Overview Method Purpose create_qos() Create QoS rule. modify_qos() Modify QoS rule. delete_qos() Delete QoS rule. get_qos() Retrieve specific QoS. list_qos() List all QoS rules. create_qos Signature: create_qos(name, params) Parameter Type Description name str QoS rule name. params dict Limits (maxIOPS, maxBandwidthMBps, scope members, priority). Preprocessing: validate_qos_params ensures numeric limits positive, mutually exclusive constraints handled, member scopes valid. Returns: dict - QoS resource. modify_qos / delete_qos / get_qos / list_qos Standard CRUD patterns with validation of existence and parameter keys before REST calls. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"QoS"},{"location":"api_reference/qos/#qosworkflow","text":"Define and manage Quality of Service (QoS) policies restricting I/O (bandwidth, IOPS) on volumes or sets. Methods Overview Method Purpose create_qos() Create QoS rule. modify_qos() Modify QoS rule. delete_qos() Delete QoS rule. get_qos() Retrieve specific QoS. list_qos() List all QoS rules. create_qos Signature: create_qos(name, params) Parameter Type Description name str QoS rule name. params dict Limits (maxIOPS, maxBandwidthMBps, scope members, priority). Preprocessing: validate_qos_params ensures numeric limits positive, mutually exclusive constraints handled, member scopes valid. Returns: dict - QoS resource. modify_qos / delete_qos / get_qos / list_qos Standard CRUD patterns with validation of existence and parameter keys before REST calls. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"QOSWorkflow"},{"location":"api_reference/remote_copy_group/","text":"RemoteCopyGroupWorkflow \u00b6 Orchestrate remote replication groups, volume admissions, synchronization, and target/links management. Methods Overview (Selected) Method Purpose create_remote_copy_group() Create group. delete_remote_copy_group() Delete group. modify_remote_copy_group() Adjust local settings & targets. remote_copy_group_status() Fetch status. add_volume_to_remote_copy_group() Admit volume. remove_volume_from_remote_copy_group() Remove volume. start_remote_copy_group() Start replication. stop_remote_copy_group() Stop replication. synchronize_remote_copy_group() Force synchronization. admit_remote_copy_links() Establish links. dismiss_remote_copy_links() Remove links. admit_remote_copy_target() Add target. dismiss_remote_copy_target() Remove target. show_remote_copy_service() Display service info. rcopy_link_exists() Check link existence. start_remote_copy_service() Start replication service. create_remote_copy_group Signature: create_remote_copy_group(remote_copy_group_name, domain, remote_copy_targets, local_user_cpg, local_snap_cpg) Parameter Type Description remote_copy_group_name str Group name. domain str Optional domain. remote_copy_targets list[dict] Target definitions (name, mode, etc.). local_user_cpg str Local user CPG. local_snap_cpg str Local snapshot CPG. Preprocessing: Validates target structures, ensures group non-existence, checks CPG availability. Returns: dict - Group resource. Other methods perform similar validation (volume existence, target availability, link uniqueness) before executing REST/SSH commands. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Remote Copy Group"},{"location":"api_reference/remote_copy_group/#remotecopygroupworkflow","text":"Orchestrate remote replication groups, volume admissions, synchronization, and target/links management. Methods Overview (Selected) Method Purpose create_remote_copy_group() Create group. delete_remote_copy_group() Delete group. modify_remote_copy_group() Adjust local settings & targets. remote_copy_group_status() Fetch status. add_volume_to_remote_copy_group() Admit volume. remove_volume_from_remote_copy_group() Remove volume. start_remote_copy_group() Start replication. stop_remote_copy_group() Stop replication. synchronize_remote_copy_group() Force synchronization. admit_remote_copy_links() Establish links. dismiss_remote_copy_links() Remove links. admit_remote_copy_target() Add target. dismiss_remote_copy_target() Remove target. show_remote_copy_service() Display service info. rcopy_link_exists() Check link existence. start_remote_copy_service() Start replication service. create_remote_copy_group Signature: create_remote_copy_group(remote_copy_group_name, domain, remote_copy_targets, local_user_cpg, local_snap_cpg) Parameter Type Description remote_copy_group_name str Group name. domain str Optional domain. remote_copy_targets list[dict] Target definitions (name, mode, etc.). local_user_cpg str Local user CPG. local_snap_cpg str Local snapshot CPG. Preprocessing: Validates target structures, ensures group non-existence, checks CPG availability. Returns: dict - Group resource. Other methods perform similar validation (volume existence, target availability, link uniqueness) before executing REST/SSH commands. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"RemoteCopyGroupWorkflow"},{"location":"api_reference/schedule/","text":"Schedule Operations \u00b6 Snapshot schedule lifecycle utilities exposed directly on AnsibleClient (not a separate workflow class). These methods manage recurring snapshot tasks with retention and expiration policies. Methods Overview Method Purpose scheduleExists() Check if schedule exists. createSchedule() Create a new snapshot schedule. deleteSchedule() Delete an existing schedule. modifySchedule() Modify schedule name and/or frequency. getSchedule() Retrieve schedule definition. getScheduleStatus() Retrieve current status/state. suspendSchedule() Suspend execution of schedule. resumeSchedule() Resume a suspended schedule. Common Payload Keys (createSchedule) | Key | Type | Description | |-----|------|-------------| | read_only | bool | If True, snapshots created read-only. | | expiration_time | int | Time value before expiration. | | expiration_unit | str | Unit for expiration (e.g. hours , days ). Converted internally to hours. | | retention_time | int | Time to retain before deletion. | | retention_unit | str | Unit for retention (e.g. hours , days ). Converted internally to hours. | | base_volume_name | str | Source volume for scheduled snapshots. | Preprocessing: preprocess_create_schedule(expiration_time, retention_time, expiration_unit, retention_unit) converts units to hours and validates non-zero durations. If either duration resolves to 0 hours, creation aborts with an error (idempotent safeguard). createSchedule Signature: createSchedule(schedule_name, taskfreq, payload) Parameter Type Required Description schedule_name str Yes Unique schedule name. taskfreq str Yes Frequency string (e.g. hourly , daily , cron-like tokens) consumed by underlying CLI/SSH. payload dict Yes See payload keys above. Returns: tuple (changed, failed, message, data) reflecting creation result. modifySchedule Signature: modifySchedule(name, new_name, task_freq) Parameter Type Required Description name str Yes Existing schedule name. new_name str No New name to rename schedule. task_freq str No Updated frequency string. Preprocessing: Builds setsched command options only for changed values; skips no-op modifications. suspendSchedule / resumeSchedule Both validate existence ( scheduleExists ) before invoking underlying SSH command. Return tuple (changed, failed, message, data) ; if absent, return (False, False, \"Schedule does not exist\", {}) . deleteSchedule Validates existence and issues force removal command. Returns deletion task result or no-op tuple if schedule absent. Error Handling SSH command exceptions are caught and converted to message tuples; invalid preprocessing (zero retention/expiration) aborts early. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Schedule"},{"location":"api_reference/schedule/#schedule-operations","text":"Snapshot schedule lifecycle utilities exposed directly on AnsibleClient (not a separate workflow class). These methods manage recurring snapshot tasks with retention and expiration policies. Methods Overview Method Purpose scheduleExists() Check if schedule exists. createSchedule() Create a new snapshot schedule. deleteSchedule() Delete an existing schedule. modifySchedule() Modify schedule name and/or frequency. getSchedule() Retrieve schedule definition. getScheduleStatus() Retrieve current status/state. suspendSchedule() Suspend execution of schedule. resumeSchedule() Resume a suspended schedule. Common Payload Keys (createSchedule) | Key | Type | Description | |-----|------|-------------| | read_only | bool | If True, snapshots created read-only. | | expiration_time | int | Time value before expiration. | | expiration_unit | str | Unit for expiration (e.g. hours , days ). Converted internally to hours. | | retention_time | int | Time to retain before deletion. | | retention_unit | str | Unit for retention (e.g. hours , days ). Converted internally to hours. | | base_volume_name | str | Source volume for scheduled snapshots. | Preprocessing: preprocess_create_schedule(expiration_time, retention_time, expiration_unit, retention_unit) converts units to hours and validates non-zero durations. If either duration resolves to 0 hours, creation aborts with an error (idempotent safeguard). createSchedule Signature: createSchedule(schedule_name, taskfreq, payload) Parameter Type Required Description schedule_name str Yes Unique schedule name. taskfreq str Yes Frequency string (e.g. hourly , daily , cron-like tokens) consumed by underlying CLI/SSH. payload dict Yes See payload keys above. Returns: tuple (changed, failed, message, data) reflecting creation result. modifySchedule Signature: modifySchedule(name, new_name, task_freq) Parameter Type Required Description name str Yes Existing schedule name. new_name str No New name to rename schedule. task_freq str No Updated frequency string. Preprocessing: Builds setsched command options only for changed values; skips no-op modifications. suspendSchedule / resumeSchedule Both validate existence ( scheduleExists ) before invoking underlying SSH command. Return tuple (changed, failed, message, data) ; if absent, return (False, False, \"Schedule does not exist\", {}) . deleteSchedule Validates existence and issues force removal command. Returns deletion task result or no-op tuple if schedule absent. Error Handling SSH command exceptions are caught and converted to message tuples; invalid preprocessing (zero retention/expiration) aborts early. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Schedule Operations"},{"location":"api_reference/snapshot/","text":"SnapshotWorkflow \u00b6 Manage virtual copy snapshots: creation, deletion, and promotion (making a snapshot the active volume). Methods Overview Method Purpose create_snapshot() Create snapshot of a base volume. delete_snapshot() Delete a snapshot. promoteVirtualCopy() Promote snapshot to base volume (restore). create_snapshot Signature: create_snapshot(volume_name, snapshot_name, optional=None) Parameter Type Required Description volume_name str Yes Base volume name. snapshot_name str Yes New snapshot name. optional dict No Extra attributes (retention policy, read-only flag, etc.). Preprocessing: preprocess_create_snapshot validates that base volume exists, resolves optional flags, sets default retention or read-only, skips creation if snapshot already present. Returns: dict - Snapshot resource. delete_snapshot Signature: delete_snapshot(snapshot_name) Parameter Type Required Description snapshot_name str Yes Snapshot name. Preprocessing: preprocess_delete_snapshot checks existence and dependency (promotion states) before deletion. Returns: dict | None - Deletion result or None if snapshot absent. promoteVirtualCopy Signature: promoteVirtualCopy(name, params) Parameter Type Required Description name str Yes Snapshot name to promote. params dict Yes Promotion options (e.g. priority, allowRSC). Preprocessing: preprocess_promoteVirtualCopy builds payload including action code, validates snapshot state and ensures not already promoted. Returns: dict - Promotion task result. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Snapshot"},{"location":"api_reference/snapshot/#snapshotworkflow","text":"Manage virtual copy snapshots: creation, deletion, and promotion (making a snapshot the active volume). Methods Overview Method Purpose create_snapshot() Create snapshot of a base volume. delete_snapshot() Delete a snapshot. promoteVirtualCopy() Promote snapshot to base volume (restore). create_snapshot Signature: create_snapshot(volume_name, snapshot_name, optional=None) Parameter Type Required Description volume_name str Yes Base volume name. snapshot_name str Yes New snapshot name. optional dict No Extra attributes (retention policy, read-only flag, etc.). Preprocessing: preprocess_create_snapshot validates that base volume exists, resolves optional flags, sets default retention or read-only, skips creation if snapshot already present. Returns: dict - Snapshot resource. delete_snapshot Signature: delete_snapshot(snapshot_name) Parameter Type Required Description snapshot_name str Yes Snapshot name. Preprocessing: preprocess_delete_snapshot checks existence and dependency (promotion states) before deletion. Returns: dict | None - Deletion result or None if snapshot absent. promoteVirtualCopy Signature: promoteVirtualCopy(name, params) Parameter Type Required Description name str Yes Snapshot name to promote. params dict Yes Promotion options (e.g. priority, allowRSC). Preprocessing: preprocess_promoteVirtualCopy builds payload including action code, validates snapshot state and ensures not already promoted. Returns: dict - Promotion task result. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"SnapshotWorkflow"},{"location":"api_reference/system/","text":"SystemWorkflow \u00b6 Retrieve high-level system metadata, status, capacity and configuration details. Methods Overview Method Purpose get_system_status() Returns health/status summary. get_capacity() Fetch capacity utilization metrics. list_ports() Enumerate system ports and their state. Actual method names reflect those implemented in SystemWorkflow ; adapt above if naming differs. Preprocessing: Minimal; primarily wraps REST GET calls with exception translation and may collate multiple endpoint results for convenience. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"System"},{"location":"api_reference/system/#systemworkflow","text":"Retrieve high-level system metadata, status, capacity and configuration details. Methods Overview Method Purpose get_system_status() Returns health/status summary. get_capacity() Fetch capacity utilization metrics. list_ports() Enumerate system ports and their state. Actual method names reflect those implemented in SystemWorkflow ; adapt above if naming differs. Preprocessing: Minimal; primarily wraps REST GET calls with exception translation and may collate multiple endpoint results for convenience. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"SystemWorkflow"},{"location":"api_reference/vlun/","text":"VLUNWorkflow \u00b6 Export / unexport volumes and volume sets to hosts and host sets (Virtual LUN mappings). Supports optional manual LUN assignment and port targeting. Methods Overview Method Purpose export_volume_to_host() Export volume to a host. unexport_volume_from_host() Remove host export. export_volume_to_hostset() Export volume to host set. unexport_volume_from_hostset() Remove host set export. export_volumeset_to_host() Export volume set to host. unexport_volumeset_from_host() Remove export of set from host. export_volumeset_to_hostset() Export volume set to host set. unexport_volumeset_from_hostset() Remove set export from host set. Common Parameters | Name | Type | Description | |------|------|-------------| | volume_name / volume_set_name | str | Volume or volume set being exported. | | host_name / host_set_name | str | Target host or host set. | | lun | int | Explicit LUN number (omit if autolun=True ). | | node_val, slot, card_port | int | Port addressing components (implementation maps to physical port). | | autolun | bool | If True, array assigns next available LUN. | Preprocessing: build_payload assembles export payload, find_vlun checks for existing mappings for idempotence, validates host/volume existence and ensures no duplicate LUN conflict. Returns: dict - Mapping result (or indication of existing mapping for idempotence). Unexport operations return confirmation or no-op. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"VLUN"},{"location":"api_reference/vlun/#vlunworkflow","text":"Export / unexport volumes and volume sets to hosts and host sets (Virtual LUN mappings). Supports optional manual LUN assignment and port targeting. Methods Overview Method Purpose export_volume_to_host() Export volume to a host. unexport_volume_from_host() Remove host export. export_volume_to_hostset() Export volume to host set. unexport_volume_from_hostset() Remove host set export. export_volumeset_to_host() Export volume set to host. unexport_volumeset_from_host() Remove export of set from host. export_volumeset_to_hostset() Export volume set to host set. unexport_volumeset_from_hostset() Remove set export from host set. Common Parameters | Name | Type | Description | |------|------|-------------| | volume_name / volume_set_name | str | Volume or volume set being exported. | | host_name / host_set_name | str | Target host or host set. | | lun | int | Explicit LUN number (omit if autolun=True ). | | node_val, slot, card_port | int | Port addressing components (implementation maps to physical port). | | autolun | bool | If True, array assigns next available LUN. | Preprocessing: build_payload assembles export payload, find_vlun checks for existing mappings for idempotence, validates host/volume existence and ensures no duplicate LUN conflict. Returns: dict - Mapping result (or indication of existing mapping for idempotence). Unexport operations return confirmation or no-op. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"VLUNWorkflow"},{"location":"api_reference/volume/","text":"VolumeWorkflow \u00b6 Operations for virtual volumes: create, inspect, modify, grow, tune and delete. Methods in AnsibleClient wrap underlying workflow logic and invoke preprocessing helpers to normalize inputs. Methods Overview Method Purpose create_volume() Create a new virtual volume. get_volume() Retrieve details for a volume. modify_volume() Update attributes (e.g. provisioning, userCPG). grow_volume() Increase capacity (operation + params determine growth). tune_volume() Adjust performance/provisioning characteristics. delete_volume() Delete a volume. Method Reference create_volume Signature: create_volume(name, cpg, size, size_unit, params=None) Parameter Type Required Description name str Yes Name for the new volume. cpg str Yes User CPG providing storage. size int Yes Numeric size value before unit conversion. size_unit str Yes Unit string (MiB, GiB, TiB). Converted to MiB internally. params dict No Additional attributes (provisioning type, compression, dedup, snapCPG, etc.). Preprocessing: preprocess_create_volume validates size & unit, converts to MiB, applies defaults (e.g. provisioning type), filters unsupported keys and may raise if volume exists (idempotence). Returns: dict - Created volume resource. get_volume Signature: get_volume(name) Parameter Type Required Description name str Yes Volume name. Preprocessing: None (direct REST retrieval). May wrap exceptions. Returns: dict - Volume details. modify_volume Signature: modify_volume(name, volume_mods, app_type=None) Parameter Type Required Description name str Yes Target volume name. volume_mods dict Yes Fields to change (e.g. newName, userCPG, provisioningType). app_type str No Optional application classification appended to payload if provided. Preprocessing: Internal validation of keys; may enrich payload with application metadata, removes no-op modifications. Returns: dict - Updated resource state. grow_volume Signature: grow_volume(name, operation, params) Parameter Type Required Description name str Yes Volume name. operation str Yes Growth mode keyword (e.g. add , resize ). params dict Yes Operation-specific values (e.g. additional_size , new_total_size , unit). Preprocessing: preprocess_grow_volume reads current size ( get_volume ) and calculates new sizeMiB; returns 0 if no change, preventing unnecessary REST action. Returns: dict - Growth operation result or idempotent no-op info. tune_volume Signature: tune_volume(name, operation, params) Parameter Type Required Description name str Yes Volume name. operation str Yes Tuning action (e.g. convert_provisioning , set_compression ). params dict Yes Required parameters for selected action. Preprocessing: preprocess_tune_volume inspects current volume details to build minimal delta (e.g. only change provisioning if different) and sets appropriate action codes. Returns: dict - Tuning result or no-op indicator. delete_volume Signature: delete_volume(name) Parameter Type Required Description name str Yes Volume name to delete. Preprocessing: preprocess_delete_volume ensures volume exists and is safe to remove (e.g. not exported) before issuing REST delete. May raise early exception if constraints violated. Returns: dict | None - Deletion response or None if already absent (idempotent). Examples client.create_volume(\"db-vol\", cpg=\"FC_r5\", size=50, size_unit=\"GiB\", params={\"compression\": True}) client.grow_volume(\"db-vol\", operation=\"add\", params={\"additional\": 10, \"unit\": \"GiB\"}) client.tune_volume(\"db-vol\", operation=\"convert_provisioning\", params={\"newType\": \"tpvv\"}) Error Handling All methods may raise HPEStorageException (wrapped) for array-side errors; preprocessing raises ValueError or custom exceptions for invalid inputs prior to REST calls. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Volume"},{"location":"api_reference/volume/#volumeworkflow","text":"Operations for virtual volumes: create, inspect, modify, grow, tune and delete. Methods in AnsibleClient wrap underlying workflow logic and invoke preprocessing helpers to normalize inputs. Methods Overview Method Purpose create_volume() Create a new virtual volume. get_volume() Retrieve details for a volume. modify_volume() Update attributes (e.g. provisioning, userCPG). grow_volume() Increase capacity (operation + params determine growth). tune_volume() Adjust performance/provisioning characteristics. delete_volume() Delete a volume. Method Reference create_volume Signature: create_volume(name, cpg, size, size_unit, params=None) Parameter Type Required Description name str Yes Name for the new volume. cpg str Yes User CPG providing storage. size int Yes Numeric size value before unit conversion. size_unit str Yes Unit string (MiB, GiB, TiB). Converted to MiB internally. params dict No Additional attributes (provisioning type, compression, dedup, snapCPG, etc.). Preprocessing: preprocess_create_volume validates size & unit, converts to MiB, applies defaults (e.g. provisioning type), filters unsupported keys and may raise if volume exists (idempotence). Returns: dict - Created volume resource. get_volume Signature: get_volume(name) Parameter Type Required Description name str Yes Volume name. Preprocessing: None (direct REST retrieval). May wrap exceptions. Returns: dict - Volume details. modify_volume Signature: modify_volume(name, volume_mods, app_type=None) Parameter Type Required Description name str Yes Target volume name. volume_mods dict Yes Fields to change (e.g. newName, userCPG, provisioningType). app_type str No Optional application classification appended to payload if provided. Preprocessing: Internal validation of keys; may enrich payload with application metadata, removes no-op modifications. Returns: dict - Updated resource state. grow_volume Signature: grow_volume(name, operation, params) Parameter Type Required Description name str Yes Volume name. operation str Yes Growth mode keyword (e.g. add , resize ). params dict Yes Operation-specific values (e.g. additional_size , new_total_size , unit). Preprocessing: preprocess_grow_volume reads current size ( get_volume ) and calculates new sizeMiB; returns 0 if no change, preventing unnecessary REST action. Returns: dict - Growth operation result or idempotent no-op info. tune_volume Signature: tune_volume(name, operation, params) Parameter Type Required Description name str Yes Volume name. operation str Yes Tuning action (e.g. convert_provisioning , set_compression ). params dict Yes Required parameters for selected action. Preprocessing: preprocess_tune_volume inspects current volume details to build minimal delta (e.g. only change provisioning if different) and sets appropriate action codes. Returns: dict - Tuning result or no-op indicator. delete_volume Signature: delete_volume(name) Parameter Type Required Description name str Yes Volume name to delete. Preprocessing: preprocess_delete_volume ensures volume exists and is safe to remove (e.g. not exported) before issuing REST delete. May raise early exception if constraints violated. Returns: dict | None - Deletion response or None if already absent (idempotent). Examples client.create_volume(\"db-vol\", cpg=\"FC_r5\", size=50, size_unit=\"GiB\", params={\"compression\": True}) client.grow_volume(\"db-vol\", operation=\"add\", params={\"additional\": 10, \"unit\": \"GiB\"}) client.tune_volume(\"db-vol\", operation=\"convert_provisioning\", params={\"newType\": \"tpvv\"}) Error Handling All methods may raise HPEStorageException (wrapped) for array-side errors; preprocessing raises ValueError or custom exceptions for invalid inputs prior to REST calls. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"VolumeWorkflow"},{"location":"api_reference/volumeset/","text":"VolumeSetWorkflow \u00b6 Group volumes for policy management, exports and replication operations. Methods Overview Method Purpose create_volumeset() Create volume set. delete_volumeset() Delete volume set. add_volumes_to_volumeset() Add volumes. remove_volumes_from_volumeset() Remove volumes. create_volumeset Signature: create_volumeset(name, domain=None, setmembers=None) Parameter Type Description name str Volume set name. domain str Optional domain. setmembers list[str] Initial volume names. Preprocessing: Confirms each volume exists, filters duplicates, checks for existing set. Returns: dict - Volume set resource. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"Volume Set"},{"location":"api_reference/volumeset/#volumesetworkflow","text":"Group volumes for policy management, exports and replication operations. Methods Overview Method Purpose create_volumeset() Create volume set. delete_volumeset() Delete volume set. add_volumes_to_volumeset() Add volumes. remove_volumes_from_volumeset() Remove volumes. create_volumeset Signature: create_volumeset(name, domain=None, setmembers=None) Parameter Type Description name str Volume set name. domain str Optional domain. setmembers list[str] Initial volume names. Preprocessing: Confirms each volume exists, filters duplicates, checks for existing set. Returns: dict - Volume set resource. \u00a9 2025 Hewlett Packard Enterprise. All rights reserved.","title":"VolumeSetWorkflow"}]}